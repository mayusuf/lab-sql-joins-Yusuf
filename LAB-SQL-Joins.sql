-- LAB | SQL Joins
USE sakila;

-- 1. List the number of films per category

SELECT c.name as name_of_category, COUNT(c.category_id) AS 'number_of_films'
FROM category c
JOIN film_category fc
ON c.category_id = fc.category_id
JOIN film f 
ON fc.film_id = f.film_id
GROUP BY c.category_id;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, ct.city, c.country
FROM store s
JOIN address ad
ON s.address_id = ad.address_id
JOIN city ct
ON ad.city_id = ct.city_id
JOIN country c
ON ct.country_id = c.country_id 

-- 3. Calculate the total revenue generated by each store in dollars.

SELECT s.store_id AS 'Store', SUM(p.amount) AS 'revenue'
FROM store s
JOIN inventory i
ON s.store_id = i.store_id
JOIN rental r 
ON i.inventory_id = r.inventory_id
JOIN payment p
ON r.rental_id = p.rental_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category

SELECT c.name AS 'category_name' , round(AVG(f.`length`),2) AS 'mean_running_time' 
FROM film f
JOIN film_category fc
ON f.film_id = fc.film_id
JOIN category c
ON fc.category_id = c.category_id
GROUP BY c.category_id

-- Bonus
-- 5. Identify the film categories with the longest average running time

SELECT c.name AS 'category_name' , round(AVG(f.`length`),2) AS 'mean_runing_time' 
FROM film f
JOIN film_category fc
ON f.film_id = fc.film_id
JOIN category c
ON fc.category_id = c.category_id
GROUP BY c.category_id
ORDER BY mean_runing_time DESC 
-- LIMIT 5;

-- 6. Display the top 10 most frequently rented movies in descending order

SELECT f.title, COUNT(f.film_id)
FROM rental r
JOIN inventory i
ON r.inventory_id = i.inventory_id
JOIN film f
ON i.film_id = f.film_id
GROUP BY f.film_id
ORDER BY COUNT(f.film_id) DESC
LIMIT 10;

--- 7. Determine if "Academy Dinosaur" can be rented from Store 1

SELECT f.title, i.store_id
FROM inventory i
JOIN film f 
ON i.film_id = f.film_id
JOIN rental r 
ON i.inventory_id = r.inventory_id
WHERE f.title = 'Academy Dinosaur'
GROUP BY  f.title, i.store_id
order BY  i.store_id ;

-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether 
-- each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information 
-- can be obtained using a CASE statement combined with IFNULL."

-- SELECT count(t2.status) FROM ( 

SELECT DISTINCT(f.title), 
CASE 
   WHEN i.film_id IS NULL THEN 'NOT available'
   ELSE 'Available'
END 
AS 'status'
FROM film f
LEFT JOIN inventory i
ON f.film_id = i.film_id

-- ) AS t2
-- WHERE t2.status = 'NOT available'
